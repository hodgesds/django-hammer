from django.contrib import admin
from {{app}}.models import (
    {% for app_model in app_models %}
    {{app_model}},
    {% endfor %}
)

class MultiDBModelAdmin(admin.ModelAdmin):
    # A handy constant for the name of the alternate database.
    using = '{{app}}'

    def save_model(self, request, obj, form, change):
        # Tell Django to save objects to the '{{app}}' database.
        obj.save(using=self.using)

    def delete_model(self, request, obj):
        # Tell Django to delete objects from the '{{app}}' database
        obj.delete(using=self.using)

    def get_queryset(self, request):
        # Tell Django to look for objects on the '{{app}}' database.
        return super(MultiDBModelAdmin, self).get_queryset(request).using(self.using)

    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):
        # Tell Django to populate ForeignKey widgets using a query
        # on the '{{app}}' database.
        return super(MultiDBModelAdmin, self).formfield_for_foreignkey(db_field, request=request, using=self.using, **kwargs)

    def formfield_for_manytomany(self, db_field, request=None, **kwargs):
        # Tell Django to populate ManyToMany widgets using a query
        # on the '{{app_db}}' database.
        return super(MultiDBModelAdmin, self).formfield_for_manytomany(db_field, request=request, using=self.using, **kwargs)


{% for app_model in app_models %}
admin.site.register({{app_model}}, MultiDBModelAdmin)
{% endfor%}